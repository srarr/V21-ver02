#!/bin/bash

# Post-commit Git hook
# Automatically runs checkpoint-manager after each commit
# to update all tracking files

# Enable strict error handling
set -e

# Get the repository root
REPO_ROOT="$(git rev-parse --show-toplevel)"
CHECKPOINT_SCRIPT="$REPO_ROOT/scripts/auto-checkpoint.sh"
TODO_PERSIST_SCRIPT="$REPO_ROOT/scripts/todo-persist.js"

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${BLUE}ðŸ”§ Post-commit hook executing...${NC}"

# Get commit information
COMMIT_HASH=$(git rev-parse HEAD)
COMMIT_MSG=$(git log -1 --pretty=%B)
COMMIT_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD)

echo -e "${BLUE}Commit:${NC} ${COMMIT_HASH:0:8}"
echo -e "${BLUE}Files changed:${NC} $(echo "$COMMIT_FILES" | wc -l) files"

# Check if this looks like a task completion commit
TASK_COMPLETION_INDICATORS=(
  "implement"
  "complete"
  "finish" 
  "done"
  "add.*test"
  "fix.*test"
  "phase.*complete"
  "âœ…"
  "âœ“"
  "[x]"
)

LOOKS_LIKE_COMPLETION=false
for indicator in "${TASK_COMPLETION_INDICATORS[@]}"; do
  if echo "$COMMIT_MSG" | grep -qi "$indicator"; then
    LOOKS_LIKE_COMPLETION=true
    break
  fi
done

# Check if important files were modified
IMPORTANT_FILES_CHANGED=false
IMPORTANT_PATTERNS=(
  "apps/orchestrator/.*\.ts$"
  "apps/api/.*\.go$"
  "apps/web/.*\.(svelte|ts|js)$"
  "contracts/.*\.yaml$"
  "migrations/.*\.sql$"
  ".*_test\.(go|ts|js)$"
)

for pattern in "${IMPORTANT_PATTERNS[@]}"; do
  if echo "$COMMIT_FILES" | grep -qE "$pattern"; then
    IMPORTANT_FILES_CHANGED=true
    echo -e "${YELLOW}Important files changed matching pattern:${NC} $pattern"
    break
  fi
done

# Run checkpoint-manager if this looks like a significant commit
if [ "$LOOKS_LIKE_COMPLETION" = true ] || [ "$IMPORTANT_FILES_CHANGED" = true ]; then
  echo -e "${BLUE}Running checkpoint-manager...${NC}"
  
  # Initialize or update todo persistence system
  if [ -f "$TODO_PERSIST_SCRIPT" ]; then
    echo -e "${BLUE}Updating todo persistence...${NC}"
    node "$TODO_PERSIST_SCRIPT" init 2>/dev/null || true
  fi
  
  # Run the main checkpoint script
  if [ -f "$CHECKPOINT_SCRIPT" ] && [ -x "$CHECKPOINT_SCRIPT" ]; then
    echo -e "${BLUE}Executing auto-checkpoint script...${NC}"
    bash "$CHECKPOINT_SCRIPT" || {
      echo -e "${YELLOW}âš  Checkpoint script encountered issues but continuing...${NC}"
    }
  else
    echo -e "${YELLOW}âš  Checkpoint script not found or not executable${NC}"
    echo "  Expected: $CHECKPOINT_SCRIPT"
  fi
  
  echo -e "${GREEN}âœ… Post-commit checkpoint update complete${NC}"
else
  echo -e "${YELLOW}â„¹ Skipping checkpoint update (doesn't look like task completion)${NC}"
fi

# Log the hook execution
LOG_FILE="$REPO_ROOT/.claude/hook-execution.log"
mkdir -p "$(dirname "$LOG_FILE")"
echo "[$(date '+%Y-%m-%d %H:%M:%S')] post-commit: $COMMIT_HASH - completion=$LOOKS_LIKE_COMPLETION, important=$IMPORTANT_FILES_CHANGED" >> "$LOG_FILE"

echo -e "${BLUE}ðŸ”§ Post-commit hook finished${NC}"